"""
Django settings for QnA AI project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
import environ

# Set the project base directory
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
# Take environment variables from .env file
environ.Env.read_env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY', default='django-insecure-(iaf!dj)+veke*p$!%xuur^92&fc$pblob=5j6#n9o7i632h*a')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', False)


ALLOWED_HOSTS = ['*']

# Get the URL patterns from ENV
PROD_URL_PATTERN = env('PROD_URL_PATTERN', default='https://*/admin/')
# Needed for Django 4.0+ to access django admin
CSRF_TRUSTED_ORIGINS = [
    PROD_URL_PATTERN
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'adrf',
    'apps.api',
]

if DEBUG:
    # If Debug more || Lower environments only
    INSTALLED_APPS.append(
        'django_extensions'
    )



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
               BASE_DIR / "templates"
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# DATABASE CONFIGURATION
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('APP_DB_NAME'),
        'USER': env('APP_DB_USER'),
        'PASSWORD': env('APP_DB_PASSWORD'),
        'HOST': env('APP_DB_HOST'),
        'PORT': env('APP_DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# STATIC FILE CONFIGURATION
# ------------------------------------------------------------------------------
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STORE_STATIC_IN_S3 = env('STORE_STATIC_IN_S3', default='False').lower() == 'true'

AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME',default='bucket-s3')
AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME',default='region-america')

if STORE_STATIC_IN_S3 is True:
    # aws settings
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

    # s3 static settings
    AWS_LOCATION = env('AWS_LOCATION')
    # location to store custom static files on S3
    STATICFILES_DIRS = [BASE_DIR / "custom_static_files"]
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
else:
    # custom static file that we will put for local development
    STATICFILES_DIRS = [BASE_DIR / "custom_static_files"]
    STATIC_URL = '/static/'
    STATIC_ROOT = env("STATIC_ROOT", default=os.path.join(BASE_DIR, "static"))

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ------------------------------------------------------------------------------
# OPENAI CONFIGURATION
# ------------------------------------------------------------------------------
OPENAI_API_KEY = env("OPENAI_API_KEY")
OPENAI_ENDPOINT = env("OPENAI_ENDPOINT")

# ------------------------------------------------------------------------------
# DJANGO REST FRAMEWORK CONFIGURATION
# ------------------------------------------------------------------------------
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [],
}

# TIMESHEET MAX HOURS
MAX_TIMESHEET_HRS = 24
MIN_TIMESHEET_HRS = 0.1



# Policy Collection and Model Name
COLLECTION_NAME = os.environ.get("COLLECTION_NAME", "qna_documents")
MODEL_NAME = os.environ.get("MODEL_NAME", "gpt-4o-mini")
